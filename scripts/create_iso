#!/bin/sh

. ./config

# files present in the initramfs
INITRAMFS_FILES="bin/init
                 bin/ksh
                 bin/syslogd
                 bin/logd
                 bin/mkdir
                 bin/cp
                 bin/mount
                 bin/umount
                 bin/mergedirs
                 bin/sleep
                 bin/klogecho
                 bin/clear
                 bin/cat
                 etc/rc.d/rc.sysinit
                 etc/rc.d/rc.shutdown"

# directories present in the initramfs
INITRAMFS_DIRECTORIES="run
                       etc/rc.d
                       bin
                       var/log
                       proc
                       dev
                       mnt/home
                       mnt/rw
                       mnt/union
                       mnt/ro
                       sys"

# package present in the root file system
PACKAGES="linux
          lazy_utils
          packdude
          mandoc
          isolinux
          elilo
          dhcpcd
          rfkill
          iw
          wpa_supplicant
          gzip
          lbzip2
          xz
          libarchive
          packdude
          dropbear
          bftpd
          nc
          tinyunmute
          less
          htop
          nano
          tinyxserver
          evilwm
          aterm
          conky
          rox
          gtkdialog1
          lynx
          xchat
          grun
          gtkfind
          gtkedit
          calcoo
          gcalendar"

BASE_DIR="$(pwd)"
VERSION="$(date +%d%m%Y)"
ISO_NAME="lazyux-$VERSION.iso"
REPO="http://repo.dimakrasner.com:1024"

# initialize the root file system with the skeleton
root_fs="$(mktemp -d -u)"
cp -ar "$BASE_DIR/skeleton" "$root_fs"

# install the packages
mkdir -p "$root_fs/var/packdude"
for package in $PACKAGES
do
	packdude -i $package -p "$root_fs" -u "$REPO"
done

# remove the package database
rm -f "$root_fs/var/packdude"/repo-*.sqlite3

# remove packdude's lock file
rm -f "$root_fs/var/packdude/lock"

# create a temporary directory for the initramfs contents
initramfs_root="$(mktemp -d -u)"

# create the initramfs directories
for directory in $INITRAMFS_DIRECTORIES
do
	mkdir -p "$initramfs_root/$directory"
done

# add required programs and scripts to the initramfs
for i in $INITRAMFS_FILES
do
	cp "$root_fs/$i" "$initramfs_root/$i"
done

# create a temporary directory for the extracted ISO image contents
iso_root="$(mktemp -d)"

# generate a compressed initramfs
cd "$initramfs_root"
find -name .gitignore -delete
chown -R 0:0 .
find . | cpio -o -H newc | xz -9 -e --check=none > "$iso_root/initrd.xz"
rm -rf "$initramfs_root"

# create a 4 MB, FAT12 UEFI boot image, for UEFI boot
dd if=/dev/zero of="$iso_root/efiboot.img" bs=1024K count=4
/sbin/mkfs.vfat -F 12 -n "LAZYUX" "$iso_root/efiboot.img"
mmd -i "$iso_root/efiboot.img" "EFI"
mmd -i "$iso_root/efiboot.img" "EFI/BOOT"
mcopy -i "$iso_root/efiboot.img" "$root_fs/boot/elilo.efi" "::EFI/BOOT/BOOTX64.EFI"
mcopy -i "$iso_root/efiboot.img" "$root_fs/boot/elilo.conf" "::EFI/BOOT/"
mcopy -i "$iso_root/efiboot.img" "$root_fs/boot/bzImage" "::EFI/BOOT/"
mcopy -i "$iso_root/efiboot.img" "$iso_root/initrd.xz" "::EFI/BOOT/"

# put the kernel, the boot loader and its configuration file in the image root,
# for BIOS boot
mv "$root_fs/boot/bzImage" "$iso_root/"
mv "$root_fs/boot/isolinux.bin" "$iso_root/"
mv "$root_fs/boot/isohdpfx.bin" "$iso_root/"
mv "$root_fs/boot/isolinux.cfg" "$iso_root/"

# generate font cache files
for i in "$root_fs/usr/share/fonts"/*
do
	cd "$i"
	mkfontscale
	mkfontdir
done

# generate the root file system image
chown -R 0:0 "$root_fs"
mksquashfs "$root_fs" \
           "$iso_root/rootfs.sfs" \
           -comp xz \
           -Xbcj x86 \
           -b 512K \
           -no-exports
rm -rf "$root_fs"

# generate an ISO image
cd "$BASE_DIR"
xorriso -as mkisofs \
        -iso-level 3 \
        -full-iso9660-filenames \
        -volid "LAZYUX_$VERSION" \
        -appid "Lazyux $VERSION" \
        -eltorito-boot isolinux.bin \
        -eltorito-catalog boot.cat \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        -isohybrid-mbr "$iso_root/isohdpfx.bin" \
        -eltorito-alt-boot \
        -e efiboot.img \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
        -output "$BASE_DIR/$ISO_NAME" \
        "$iso_root"

# clean up
rm -rf "$iso_root"
