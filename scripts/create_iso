#!/bin/sh

. ./config

# files present in the initramfs
INITRAMFS_FILES="bin/toybox
                 bin/init
                 bin/ksh
                 bin/syslogd
                 bin/klogd
                 bin/mkdir
                 bin/cp
                 bin/cttyhack
                 bin/losetup
                 bin/mount
                 bin/umount
                 bin/luufs
                 bin/fusermount
                 bin/sleep
                 bin/clear
                 bin/cat
                 bin/contain
                 bin/poweroff
                 bin/reboot
                 etc/rc.d/rc.initramfs
                 etc/rc.d/rc.shutdown"

# directories present in the initramfs
INITRAMFS_DIRECTORIES="run
                       tmp
                       etc/rc.d
                       bin
                       var/log
                       proc
                       dev
                       mnt/home
                       mnt/rw
                       mnt/union
                       mnt/ro
                       sys"

# unneeded files and directories in the root file system
UNNEEDED_FILES="/lib/*.a
                /lib/*.o
                /lib/*.lds
                /usr/share/man/man2
                /usr/share/man/man3
                /usr/include
                /lib/pkgconfig
                /bin/*-config"

# package present in the root file system
PACKAGES="linux
          toybox
          lazy_utils
          loksh
          lok
          luufs
          packdude
          mandoc
          isolinux
          elilo
          dhcpcd
          rfkill
          iw
          wpa_supplicant
          gzip
          lbzip2
          xz
          libarchive
          packdude
          dropbear
          nc
          tinyunmute
          alsa_utils
          less
          htop
          nano
          tinyxserver
          jwm
          aterm
          xmodmap
          conky
          rox
          gtkdialog1
          dillo
          emelfm
          ytree
          guitar
          gtkcat
          prboom
          shutbox
          xpacman
          xsoldier
          xasteroids
          xhippo
          mtpaint
          gtksee
          mhwaveedit
          gcolor
          xaos
          lynx
          sylpheed
          xchat
          ircii
          guiftp
          snownews
          ted
          siag
          calcoo
          bc
          gcalendar
          calcurse
          gtklepin
          gbase
          gv
          beaver
          gtkedit
          vile
          nano
          gtkdiskfree
          gdmap
          htop
          ncdu
          gtkfontsel
          x11vnc
          screen
          gtkfind
          grun
          ffmpeg"

BASE_DIR="$(pwd)"
VERSION="$(date +%d%m%Y)"
ISO_NAME="dslr-$VERSION.iso"

# if all packages were built locally, use the build output
if [ -d "$BASE_DIR/repo" ]
then
	repo="file://$BASE_DIR/repo"
else
	# otherwise, use the upstream repository
	repo="http://repo.dimakrasner.com:1024"
fi

# initialize the root file system with the skeleton
root_fs="$(mktemp -d -u)"
cp -ar "$BASE_DIR/skeleton" "$root_fs"

# install the packages
mkdir -p "$root_fs/var/packdude"
for package in $PACKAGES
do
	packdude -i $package -n -p "$root_fs" -u "$repo"
done

# remove the package database
rm -f "$root_fs/var/packdude"/repo-*.sqlite3

# remove packdude's lock file
rm -f "$root_fs/var/packdude/lock"

# create a temporary directory for the initramfs contents
initramfs_root="$(mktemp -d -u)"

# create the initramfs directories
for directory in $INITRAMFS_DIRECTORIES
do
	mkdir -p "$initramfs_root/$directory"
done

# add required programs and scripts to the initramfs
for i in $INITRAMFS_FILES
do
	cp "$root_fs/$i" "$initramfs_root/$i"
done

# create a temporary directory for the extracted ISO image contents
iso_root="$(mktemp -d)"

# generate a compressed initramfs
cd "$initramfs_root"
chown -R 0:0 .
chmod 1777 tmp
find . | cpio -o -H newc | xz -9 -e --check=none > "$iso_root/initrd.xz"
rm -rf "$initramfs_root"

# create a 16 MB, FAT12 UEFI boot image, for UEFI boot
dd if=/dev/zero of="$iso_root/efiboot.img" bs=1024K count=16
/sbin/mkfs.vfat -F 12 -n "DSLR" "$iso_root/efiboot.img"
mmd -i "$iso_root/efiboot.img" "EFI"
mmd -i "$iso_root/efiboot.img" "EFI/BOOT"
mcopy -i "$iso_root/efiboot.img" "$root_fs/boot/elilo.efi" "::EFI/BOOT/BOOTX64.EFI"
mcopy -i "$iso_root/efiboot.img" "$root_fs/boot/elilo.conf" "::EFI/BOOT/"
mcopy -i "$iso_root/efiboot.img" "$root_fs/boot/bzImage" "::EFI/BOOT/"
mcopy -i "$iso_root/efiboot.img" "$iso_root/initrd.xz" "::EFI/BOOT/"

# put the kernel, the boot loader and its configuration file in the image root,
# for BIOS boot
mv "$root_fs/boot/bzImage" "$iso_root/"
mv "$root_fs/boot/isolinux.bin" "$iso_root/"
mv "$root_fs/boot/isohdpfx.bin" "$iso_root/"
mv "$root_fs/boot/isolinux.cfg" "$iso_root/"
rm -rf "$root_fs/boot"

# remove unneeded files and directories
for i in $UNNEEDED_FILES
do
	rm -rf "$root_fs"/$i > /dev/null 2>&1
done

# remove all .gitignore files
find "$root_fs" -name .gitignore -delete

# generate font cache files
for i in "$root_fs/usr/share/fonts"/*
do
	cd "$i"
	mkfontscale
	mkfontdir
done

# add DSLR's documentation
install -m 644 "$BASE_DIR/README" "$root_fs/usr/share/doc/dslr/README"
install -m 644 "$BASE_DIR/AUTHORS" "$root_fs/usr/share/doc/dslr/AUTHORS"
install -m 644 "$BASE_DIR/THANKS" "$root_fs/usr/share/doc/dslr/THANKS"
install -m 644 "$BASE_DIR/COPYING" "$root_fs/usr/share/doc/dslr/COPYING"

# generate the root file system image
chown -R 0:0 "$root_fs"
find "$root_fs" -type d | while read directory
do
	chmod 755 "$directory"
done
chmod 700 "$root_fs/root"
chown 1000:1000 "$root_fs/home/someone"
chmod 755 "$root_fs/home/someone"
mksquashfs "$root_fs" \
           "$iso_root/rootfs.sfs" \
           -comp xz \
           -Xbcj x86 \
           -b 512K \
           -no-exports
rm -rf "$root_fs"

# generate an ISO image
cd "$BASE_DIR"
xorriso -as mkisofs \
        -iso-level 3 \
        -full-iso9660-filenames \
        -volid "DSLR_$VERSION" \
        -appid "DSLR $VERSION" \
        -eltorito-boot isolinux.bin \
        -eltorito-catalog boot.cat \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        -isohybrid-mbr "$iso_root/isohdpfx.bin" \
        -eltorito-alt-boot \
        -e efiboot.img \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
        -output "$BASE_DIR/$ISO_NAME" \
        "$iso_root"

# clean up
rm -rf "$iso_root"
